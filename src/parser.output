Nonterminals useless in grammar

   array_index
   errortok


Terminals unused in grammar

   ERROR


Rules useless in grammar

   93 array_index: LSQUARE expr RSQUARE
   94            | array_index LSQUARE expr RSQUARE

   95 errortok: ERROR


Grammar

    0 $accept: program ENDF

    1 program: BEGIN func_list statement_seq END

    2 func_list: %empty
    3          | func_list function_declaration

    4 function_declaration: type ident LPAREN RPAREN IS statement_seq END
    5                     | type ident LPAREN param_list RPAREN IS statement_seq END

    6 param_list: param
    7           | param_list COMMA param

    8 param: type ident

    9 statement_seq: statement
   10              | statement_seq SEMICOLON statement

   11 statement: SKIP
   12          | RETURN expr
   13          | type ident ASSIGN assign_rhs
   14          | assign_lhs ASSIGN assign_rhs
   15          | READ assign_lhs
   16          | FREE expr
   17          | EXIT expr
   18          | PRINT expr
   19          | PRINTLN expr
   20          | BEGIN statement_seq END
   21          | IF expr THEN statement_seq ELSE statement_seq FI
   22          | WHILE expr DO statement_seq DONE

   23 assign_lhs: ident
   24           | array_elem_lhs
   25           | pair_elem_lhs

   26 assign_rhs: expr
   27           | array_liter
   28           | NEWPAIR LPAREN expr COMMA expr RPAREN
   29           | pair_elem_rhs
   30           | CALL ident LPAREN RPAREN
   31           | CALL ident LPAREN arg_list RPAREN

   32 arg_list: expr
   33         | arg_list COMMA expr

   34 pair_elem_rhs: FST expr
   35              | SND expr

   36 pair_elem_lhs: FST expr
   37              | SND expr

   38 type: base_type
   39     | array_type
   40     | pair_type

   41 base_type: INT
   42          | BOOL
   43          | CHAR
   44          | STRING

   45 array_type: type LSQUARE RSQUARE

   46 pair_type: PAIR LPAREN pair_elem_type COMMA pair_elem_type RPAREN

   47 pair_elem_type: base_type
   48               | array_type
   49               | PAIR

   50 expr: int_liter
   51     | bool_liter
   52     | char_liter
   53     | str_liter
   54     | pair_liter
   55     | ident
   56     | array_elem_exp
   57     | unary_op
   58     | binary_op
   59     | LPAREN expr RPAREN

   60 unary_op: BANG expr
   61         | LEN expr
   62         | ORD expr
   63         | CHR expr
   64         | MINUS expr

   65 binary_op: expr STAR expr
   66          | expr SLASH expr
   67          | expr MODULO expr
   68          | expr PLUS expr
   69          | expr MINUS expr
   70          | expr GREATER expr
   71          | expr GREATEREQUALS expr
   72          | expr LESS expr
   73          | expr LESSEQUALS expr
   74          | expr EQUALS expr
   75          | expr NOTEQUALS expr
   76          | expr LOGAND expr
   77          | expr LOGOR expr

   78 ident: IDENTIFIER

   79 array_elem_exp: ident LSQUARE expr RSQUARE

   80 array_elem_lhs: ident LSQUARE expr RSQUARE

   81 int_liter: int_sign INTEGER

   82 int_sign: %empty
   83         | PLUS

   84 bool_liter: TRUE
   85           | FALSE

   86 char_liter: CHARLIT

   87 str_liter: STRINGLIT

   88 array_liter: LSQUARE expr_list RSQUARE

   89 expr_list: %empty
   90          | expr
   91          | expr_list COMMA expr

   92 pair_liter: NULLTOKEN


Terminals, with rules where they appear

ENDF (0) 0
error (256)
BEGIN (258) 1 20
END (259) 1 4 5 20
IF (260) 21
THEN (261) 21
ELSE (262) 21
FI (263) 21
WHILE (264) 22
DO (265) 22
DONE (266) 22
SKIP (267) 11
FREE (268) 16
EXIT (269) 17
TRUE (270) 84
FALSE (271) 85
IS (272) 4 5
RETURN (273) 12
CALL (274) 30 31
PAIR (275) 46 49
INT (276) 41
BOOL (277) 42
CHAR (278) 43
STRING (279) 44
NULLTOKEN (280) 92
ASSIGN (281) 13 14
LOGOR (282) 77
LOGAND (283) 76
STAR (284) 65
SLASH (285) 66
MODULO (286) 67
PLUS (287) 68 83
MINUS (288) 64 69
LESS (289) 72
LESSEQUALS (290) 73
GREATER (291) 70
GREATEREQUALS (292) 71
EQUALS (293) 74
NOTEQUALS (294) 75
BANG (295) 60
LEN (296) 61
ORD (297) 62
CHR (298) 63
LPAREN (299) 4 5 28 30 31 46 59
RPAREN (300) 4 5 28 30 31 46 59
LSQUARE (301) 45 79 80 88
RSQUARE (302) 45 79 80 88
SEMICOLON (303) 10
COMMA (304) 7 28 33 46 91
PRINT (305) 18
PRINTLN (306) 19
READ (307) 15
NEWPAIR (308) 28
FST (309) 34 36
SND (310) 35 37
ERROR (311)
IDENTIFIER (312) 78
STRINGLIT (313) 87
CHARLIT (314) 86
INTEGER (315) 81
UMINUS (316)
UPLUS (317)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
program (64)
    on left: 1, on right: 0
func_list (65)
    on left: 2 3, on right: 1 3
function_declaration (66)
    on left: 4 5, on right: 3
param_list (67)
    on left: 6 7, on right: 5 7
param (68)
    on left: 8, on right: 6 7
statement_seq (69)
    on left: 9 10, on right: 1 4 5 10 20 21 22
statement (70)
    on left: 11 12 13 14 15 16 17 18 19 20 21 22, on right: 9 10
assign_lhs (71)
    on left: 23 24 25, on right: 14 15
assign_rhs (72)
    on left: 26 27 28 29 30 31, on right: 13 14
arg_list (73)
    on left: 32 33, on right: 31 33
pair_elem_rhs (74)
    on left: 34 35, on right: 29
pair_elem_lhs (75)
    on left: 36 37, on right: 25
type (76)
    on left: 38 39 40, on right: 4 5 8 13 45
base_type (77)
    on left: 41 42 43 44, on right: 38 47
array_type (78)
    on left: 45, on right: 39 48
pair_type (79)
    on left: 46, on right: 40
pair_elem_type (80)
    on left: 47 48 49, on right: 46
expr (81)
    on left: 50 51 52 53 54 55 56 57 58 59, on right: 12 16 17 18 19
    21 22 26 28 32 33 34 35 36 37 59 60 61 62 63 64 65 66 67 68 69
    70 71 72 73 74 75 76 77 79 80 90 91
unary_op (82)
    on left: 60 61 62 63 64, on right: 57
binary_op (83)
    on left: 65 66 67 68 69 70 71 72 73 74 75 76 77, on right: 58
ident (84)
    on left: 78, on right: 4 5 8 13 23 30 31 55 79 80
array_elem_exp (85)
    on left: 79, on right: 56
array_elem_lhs (86)
    on left: 80, on right: 24
int_liter (87)
    on left: 81, on right: 50
int_sign (88)
    on left: 82 83, on right: 81
bool_liter (89)
    on left: 84 85, on right: 51
char_liter (90)
    on left: 86, on right: 52
str_liter (91)
    on left: 87, on right: 53
array_liter (92)
    on left: 88, on right: 27
expr_list (93)
    on left: 89 90 91, on right: 88 91
pair_liter (94)
    on left: 92, on right: 54


State 0

    0 $accept: . program ENDF

    BEGIN  shift, and go to state 1

    program  go to state 2


State 1

    1 program: BEGIN . func_list statement_seq END

    $default  reduce using rule 2 (func_list)

    func_list  go to state 3


State 2

    0 $accept: program . ENDF

    ENDF  shift, and go to state 4


State 3

    1 program: BEGIN func_list . statement_seq END
    3 func_list: func_list . function_declaration

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    function_declaration  go to state 23
    statement_seq         go to state 24
    statement             go to state 25
    assign_lhs            go to state 26
    pair_elem_lhs         go to state 27
    type                  go to state 28
    base_type             go to state 29
    array_type            go to state 30
    pair_type             go to state 31
    ident                 go to state 32
    array_elem_lhs        go to state 33


State 4

    0 $accept: program ENDF .

    $default  accept


State 5

   20 statement: BEGIN . statement_seq END

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 34
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 6

   21 statement: IF . expr THEN statement_seq ELSE statement_seq FI

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 48
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 7

   22 statement: WHILE . expr DO statement_seq DONE

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 59
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 8

   11 statement: SKIP .

    $default  reduce using rule 11 (statement)


State 9

   16 statement: FREE . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 60
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 10

   17 statement: EXIT . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 61
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 11

   12 statement: RETURN . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 62
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 12

   46 pair_type: PAIR . LPAREN pair_elem_type COMMA pair_elem_type RPAREN

    LPAREN  shift, and go to state 63


State 13

   41 base_type: INT .

    $default  reduce using rule 41 (base_type)


State 14

   42 base_type: BOOL .

    $default  reduce using rule 42 (base_type)


State 15

   43 base_type: CHAR .

    $default  reduce using rule 43 (base_type)


State 16

   44 base_type: STRING .

    $default  reduce using rule 44 (base_type)


State 17

   18 statement: PRINT . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 64
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 18

   19 statement: PRINTLN . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 65
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 19

   15 statement: READ . assign_lhs

    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    assign_lhs      go to state 66
    pair_elem_lhs   go to state 27
    ident           go to state 32
    array_elem_lhs  go to state 33


State 20

   36 pair_elem_lhs: FST . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 67
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 21

   37 pair_elem_lhs: SND . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 68
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 22

   78 ident: IDENTIFIER .

    $default  reduce using rule 78 (ident)


State 23

    3 func_list: func_list function_declaration .

    $default  reduce using rule 3 (func_list)


State 24

    1 program: BEGIN func_list statement_seq . END
   10 statement_seq: statement_seq . SEMICOLON statement

    END        shift, and go to state 69
    SEMICOLON  shift, and go to state 70


State 25

    9 statement_seq: statement .

    $default  reduce using rule 9 (statement_seq)


State 26

   14 statement: assign_lhs . ASSIGN assign_rhs

    ASSIGN  shift, and go to state 71


State 27

   25 assign_lhs: pair_elem_lhs .

    $default  reduce using rule 25 (assign_lhs)


State 28

    4 function_declaration: type . ident LPAREN RPAREN IS statement_seq END
    5                     | type . ident LPAREN param_list RPAREN IS statement_seq END
   13 statement: type . ident ASSIGN assign_rhs
   45 array_type: type . LSQUARE RSQUARE

    LSQUARE     shift, and go to state 72
    IDENTIFIER  shift, and go to state 22

    ident  go to state 73


State 29

   38 type: base_type .

    $default  reduce using rule 38 (type)


State 30

   39 type: array_type .

    $default  reduce using rule 39 (type)


State 31

   40 type: pair_type .

    $default  reduce using rule 40 (type)


State 32

   23 assign_lhs: ident .
   80 array_elem_lhs: ident . LSQUARE expr RSQUARE

    LSQUARE  shift, and go to state 74

    $default  reduce using rule 23 (assign_lhs)


State 33

   24 assign_lhs: array_elem_lhs .

    $default  reduce using rule 24 (assign_lhs)


State 34

   10 statement_seq: statement_seq . SEMICOLON statement
   20 statement: BEGIN statement_seq . END

    END        shift, and go to state 75
    SEMICOLON  shift, and go to state 70


State 35

   13 statement: type . ident ASSIGN assign_rhs
   45 array_type: type . LSQUARE RSQUARE

    LSQUARE     shift, and go to state 72
    IDENTIFIER  shift, and go to state 22

    ident  go to state 76


State 36

   84 bool_liter: TRUE .

    $default  reduce using rule 84 (bool_liter)


State 37

   85 bool_liter: FALSE .

    $default  reduce using rule 85 (bool_liter)


State 38

   92 pair_liter: NULLTOKEN .

    $default  reduce using rule 92 (pair_liter)


State 39

   83 int_sign: PLUS .

    $default  reduce using rule 83 (int_sign)


State 40

   64 unary_op: MINUS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 77
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 41

   60 unary_op: BANG . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 78
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 42

   61 unary_op: LEN . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 79
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 43

   62 unary_op: ORD . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 80
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 44

   63 unary_op: CHR . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 81
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 45

   59 expr: LPAREN . expr RPAREN

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 82
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 46

   87 str_liter: STRINGLIT .

    $default  reduce using rule 87 (str_liter)


State 47

   86 char_liter: CHARLIT .

    $default  reduce using rule 86 (char_liter)


State 48

   21 statement: IF expr . THEN statement_seq ELSE statement_seq FI
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    THEN           shift, and go to state 83
    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96


State 49

   57 expr: unary_op .

    $default  reduce using rule 57 (expr)


State 50

   58 expr: binary_op .

    $default  reduce using rule 58 (expr)


State 51

   55 expr: ident .
   79 array_elem_exp: ident . LSQUARE expr RSQUARE

    LSQUARE  shift, and go to state 97

    $default  reduce using rule 55 (expr)


State 52

   56 expr: array_elem_exp .

    $default  reduce using rule 56 (expr)


State 53

   50 expr: int_liter .

    $default  reduce using rule 50 (expr)


State 54

   81 int_liter: int_sign . INTEGER

    INTEGER  shift, and go to state 98


State 55

   51 expr: bool_liter .

    $default  reduce using rule 51 (expr)


State 56

   52 expr: char_liter .

    $default  reduce using rule 52 (expr)


State 57

   53 expr: str_liter .

    $default  reduce using rule 53 (expr)


State 58

   54 expr: pair_liter .

    $default  reduce using rule 54 (expr)


State 59

   22 statement: WHILE expr . DO statement_seq DONE
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    DO             shift, and go to state 99
    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96


State 60

   16 statement: FREE expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 16 (statement)


State 61

   17 statement: EXIT expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 17 (statement)


State 62

   12 statement: RETURN expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 12 (statement)


State 63

   46 pair_type: PAIR LPAREN . pair_elem_type COMMA pair_elem_type RPAREN

    PAIR    shift, and go to state 100
    INT     shift, and go to state 13
    BOOL    shift, and go to state 14
    CHAR    shift, and go to state 15
    STRING  shift, and go to state 16

    type            go to state 101
    base_type       go to state 102
    array_type      go to state 103
    pair_type       go to state 31
    pair_elem_type  go to state 104


State 64

   18 statement: PRINT expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 18 (statement)


State 65

   19 statement: PRINTLN expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 19 (statement)


State 66

   15 statement: READ assign_lhs .

    $default  reduce using rule 15 (statement)


State 67

   36 pair_elem_lhs: FST expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 36 (pair_elem_lhs)


State 68

   37 pair_elem_lhs: SND expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 37 (pair_elem_lhs)


State 69

    1 program: BEGIN func_list statement_seq END .

    $default  reduce using rule 1 (program)


State 70

   10 statement_seq: statement_seq SEMICOLON . statement

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement       go to state 105
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 71

   14 statement: assign_lhs ASSIGN . assign_rhs

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    CALL        shift, and go to state 106
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    LSQUARE     shift, and go to state 107
    NEWPAIR     shift, and go to state 108
    FST         shift, and go to state 109
    SND         shift, and go to state 110
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    assign_rhs      go to state 111
    pair_elem_rhs   go to state 112
    expr            go to state 113
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    array_liter     go to state 114
    pair_liter      go to state 58


State 72

   45 array_type: type LSQUARE . RSQUARE

    RSQUARE  shift, and go to state 115


State 73

    4 function_declaration: type ident . LPAREN RPAREN IS statement_seq END
    5                     | type ident . LPAREN param_list RPAREN IS statement_seq END
   13 statement: type ident . ASSIGN assign_rhs

    ASSIGN  shift, and go to state 116
    LPAREN  shift, and go to state 117


State 74

   80 array_elem_lhs: ident LSQUARE . expr RSQUARE

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 118
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 75

   20 statement: BEGIN statement_seq END .

    $default  reduce using rule 20 (statement)


State 76

   13 statement: type ident . ASSIGN assign_rhs

    ASSIGN  shift, and go to state 116


State 77

   64 unary_op: MINUS expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 64 (unary_op)

    Conflict between rule 64 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 64 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 64 and token STAR resolved as reduce (STAR < UMINUS).
    Conflict between rule 64 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 64 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 64 and token PLUS resolved as reduce (PLUS < UMINUS).
    Conflict between rule 64 and token MINUS resolved as reduce (MINUS < UMINUS).
    Conflict between rule 64 and token LESS resolved as reduce (LESS < UMINUS).
    Conflict between rule 64 and token LESSEQUALS resolved as reduce (LESSEQUALS < UMINUS).
    Conflict between rule 64 and token GREATER resolved as reduce (GREATER < UMINUS).
    Conflict between rule 64 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < UMINUS).
    Conflict between rule 64 and token EQUALS resolved as reduce (EQUALS < UMINUS).
    Conflict between rule 64 and token NOTEQUALS resolved as reduce (NOTEQUALS < UMINUS).


State 78

   60 unary_op: BANG expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 60 (unary_op)

    Conflict between rule 60 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 60 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 60 and token STAR resolved as reduce (STAR < BANG).
    Conflict between rule 60 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 60 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 60 and token PLUS resolved as reduce (PLUS < BANG).
    Conflict between rule 60 and token MINUS resolved as reduce (MINUS < BANG).
    Conflict between rule 60 and token LESS resolved as reduce (LESS < BANG).
    Conflict between rule 60 and token LESSEQUALS resolved as reduce (LESSEQUALS < BANG).
    Conflict between rule 60 and token GREATER resolved as reduce (GREATER < BANG).
    Conflict between rule 60 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < BANG).
    Conflict between rule 60 and token EQUALS resolved as reduce (EQUALS < BANG).
    Conflict between rule 60 and token NOTEQUALS resolved as reduce (NOTEQUALS < BANG).


State 79

   61 unary_op: LEN expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 61 (unary_op)

    Conflict between rule 61 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 61 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 61 and token STAR resolved as reduce (STAR < LEN).
    Conflict between rule 61 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 61 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 61 and token PLUS resolved as reduce (PLUS < LEN).
    Conflict between rule 61 and token MINUS resolved as reduce (MINUS < LEN).
    Conflict between rule 61 and token LESS resolved as reduce (LESS < LEN).
    Conflict between rule 61 and token LESSEQUALS resolved as reduce (LESSEQUALS < LEN).
    Conflict between rule 61 and token GREATER resolved as reduce (GREATER < LEN).
    Conflict between rule 61 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < LEN).
    Conflict between rule 61 and token EQUALS resolved as reduce (EQUALS < LEN).
    Conflict between rule 61 and token NOTEQUALS resolved as reduce (NOTEQUALS < LEN).


State 80

   62 unary_op: ORD expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 62 (unary_op)

    Conflict between rule 62 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 62 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 62 and token STAR resolved as reduce (STAR < ORD).
    Conflict between rule 62 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 62 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 62 and token PLUS resolved as reduce (PLUS < ORD).
    Conflict between rule 62 and token MINUS resolved as reduce (MINUS < ORD).
    Conflict between rule 62 and token LESS resolved as reduce (LESS < ORD).
    Conflict between rule 62 and token LESSEQUALS resolved as reduce (LESSEQUALS < ORD).
    Conflict between rule 62 and token GREATER resolved as reduce (GREATER < ORD).
    Conflict between rule 62 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < ORD).
    Conflict between rule 62 and token EQUALS resolved as reduce (EQUALS < ORD).
    Conflict between rule 62 and token NOTEQUALS resolved as reduce (NOTEQUALS < ORD).


State 81

   63 unary_op: CHR expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 63 (unary_op)

    Conflict between rule 63 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 63 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 63 and token STAR resolved as reduce (STAR < CHR).
    Conflict between rule 63 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 63 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 63 and token PLUS resolved as reduce (PLUS < CHR).
    Conflict between rule 63 and token MINUS resolved as reduce (MINUS < CHR).
    Conflict between rule 63 and token LESS resolved as reduce (LESS < CHR).
    Conflict between rule 63 and token LESSEQUALS resolved as reduce (LESSEQUALS < CHR).
    Conflict between rule 63 and token GREATER resolved as reduce (GREATER < CHR).
    Conflict between rule 63 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < CHR).
    Conflict between rule 63 and token EQUALS resolved as reduce (EQUALS < CHR).
    Conflict between rule 63 and token NOTEQUALS resolved as reduce (NOTEQUALS < CHR).


State 82

   59 expr: LPAREN expr . RPAREN
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96
    RPAREN         shift, and go to state 119


State 83

   21 statement: IF expr THEN . statement_seq ELSE statement_seq FI

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 120
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 84

   77 binary_op: expr LOGOR . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 121
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 85

   76 binary_op: expr LOGAND . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 122
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 86

   65 binary_op: expr STAR . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 123
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 87

   66 binary_op: expr SLASH . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 124
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 88

   67 binary_op: expr MODULO . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 125
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 89

   68 binary_op: expr PLUS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 126
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 90

   69 binary_op: expr MINUS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 127
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 91

   72 binary_op: expr LESS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 128
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 92

   73 binary_op: expr LESSEQUALS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 129
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 93

   70 binary_op: expr GREATER . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 130
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 94

   71 binary_op: expr GREATEREQUALS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 131
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 95

   74 binary_op: expr EQUALS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 132
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 96

   75 binary_op: expr NOTEQUALS . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 133
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 97

   79 array_elem_exp: ident LSQUARE . expr RSQUARE

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 134
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 98

   81 int_liter: int_sign INTEGER .

    $default  reduce using rule 81 (int_liter)


State 99

   22 statement: WHILE expr DO . statement_seq DONE

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 135
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 100

   46 pair_type: PAIR . LPAREN pair_elem_type COMMA pair_elem_type RPAREN
   49 pair_elem_type: PAIR .

    LPAREN  shift, and go to state 63

    $default  reduce using rule 49 (pair_elem_type)


State 101

   45 array_type: type . LSQUARE RSQUARE

    LSQUARE  shift, and go to state 72


State 102

   38 type: base_type .
   47 pair_elem_type: base_type .

    LSQUARE   reduce using rule 38 (type)
    $default  reduce using rule 47 (pair_elem_type)


State 103

   39 type: array_type .
   48 pair_elem_type: array_type .

    LSQUARE   reduce using rule 39 (type)
    $default  reduce using rule 48 (pair_elem_type)


State 104

   46 pair_type: PAIR LPAREN pair_elem_type . COMMA pair_elem_type RPAREN

    COMMA  shift, and go to state 136


State 105

   10 statement_seq: statement_seq SEMICOLON statement .

    $default  reduce using rule 10 (statement_seq)


State 106

   30 assign_rhs: CALL . ident LPAREN RPAREN
   31           | CALL . ident LPAREN arg_list RPAREN

    IDENTIFIER  shift, and go to state 22

    ident  go to state 137


State 107

   88 array_liter: LSQUARE . expr_list RSQUARE

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    INTEGER   reduce using rule 82 (int_sign)
    $default  reduce using rule 89 (expr_list)

    expr            go to state 138
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    expr_list       go to state 139
    pair_liter      go to state 58


State 108

   28 assign_rhs: NEWPAIR . LPAREN expr COMMA expr RPAREN

    LPAREN  shift, and go to state 140


State 109

   34 pair_elem_rhs: FST . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 141
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 110

   35 pair_elem_rhs: SND . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 142
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 111

   14 statement: assign_lhs ASSIGN assign_rhs .

    $default  reduce using rule 14 (statement)


State 112

   29 assign_rhs: pair_elem_rhs .

    $default  reduce using rule 29 (assign_rhs)


State 113

   26 assign_rhs: expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 26 (assign_rhs)


State 114

   27 assign_rhs: array_liter .

    $default  reduce using rule 27 (assign_rhs)


State 115

   45 array_type: type LSQUARE RSQUARE .

    $default  reduce using rule 45 (array_type)


State 116

   13 statement: type ident ASSIGN . assign_rhs

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    CALL        shift, and go to state 106
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    LSQUARE     shift, and go to state 107
    NEWPAIR     shift, and go to state 108
    FST         shift, and go to state 109
    SND         shift, and go to state 110
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    assign_rhs      go to state 143
    pair_elem_rhs   go to state 112
    expr            go to state 113
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    array_liter     go to state 114
    pair_liter      go to state 58


State 117

    4 function_declaration: type ident LPAREN . RPAREN IS statement_seq END
    5                     | type ident LPAREN . param_list RPAREN IS statement_seq END

    PAIR    shift, and go to state 12
    INT     shift, and go to state 13
    BOOL    shift, and go to state 14
    CHAR    shift, and go to state 15
    STRING  shift, and go to state 16
    RPAREN  shift, and go to state 144

    param_list  go to state 145
    param       go to state 146
    type        go to state 147
    base_type   go to state 29
    array_type  go to state 30
    pair_type   go to state 31


State 118

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr
   80 array_elem_lhs: ident LSQUARE expr . RSQUARE

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96
    RSQUARE        shift, and go to state 148


State 119

   59 expr: LPAREN expr RPAREN .

    $default  reduce using rule 59 (expr)


State 120

   10 statement_seq: statement_seq . SEMICOLON statement
   21 statement: IF expr THEN statement_seq . ELSE statement_seq FI

    ELSE       shift, and go to state 149
    SEMICOLON  shift, and go to state 70


State 121

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr
   77          | expr LOGOR expr .

    $default  reduce using rule 77 (binary_op)

    Conflict between rule 77 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 77 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 77 and token STAR resolved as reduce (STAR < LOGOR).
    Conflict between rule 77 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 77 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 77 and token PLUS resolved as reduce (PLUS < LOGOR).
    Conflict between rule 77 and token MINUS resolved as reduce (MINUS < LOGOR).
    Conflict between rule 77 and token LESS resolved as reduce (LESS < LOGOR).
    Conflict between rule 77 and token LESSEQUALS resolved as reduce (LESSEQUALS < LOGOR).
    Conflict between rule 77 and token GREATER resolved as reduce (GREATER < LOGOR).
    Conflict between rule 77 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < LOGOR).
    Conflict between rule 77 and token EQUALS resolved as reduce (EQUALS < LOGOR).
    Conflict between rule 77 and token NOTEQUALS resolved as reduce (NOTEQUALS < LOGOR).


State 122

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   76          | expr LOGAND expr .
   77          | expr . LOGOR expr

    $default  reduce using rule 76 (binary_op)

    Conflict between rule 76 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 76 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 76 and token STAR resolved as reduce (STAR < LOGAND).
    Conflict between rule 76 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 76 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 76 and token PLUS resolved as reduce (PLUS < LOGAND).
    Conflict between rule 76 and token MINUS resolved as reduce (MINUS < LOGAND).
    Conflict between rule 76 and token LESS resolved as reduce (LESS < LOGAND).
    Conflict between rule 76 and token LESSEQUALS resolved as reduce (LESSEQUALS < LOGAND).
    Conflict between rule 76 and token GREATER resolved as reduce (GREATER < LOGAND).
    Conflict between rule 76 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < LOGAND).
    Conflict between rule 76 and token EQUALS resolved as reduce (EQUALS < LOGAND).
    Conflict between rule 76 and token NOTEQUALS resolved as reduce (NOTEQUALS < LOGAND).


State 123

   65 binary_op: expr . STAR expr
   65          | expr STAR expr .
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 65 (binary_op)

    Conflict between rule 65 and token LOGOR resolved as shift (STAR < LOGOR).
    Conflict between rule 65 and token LOGAND resolved as shift (STAR < LOGAND).
    Conflict between rule 65 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 65 and token SLASH resolved as shift (STAR < SLASH).
    Conflict between rule 65 and token MODULO resolved as shift (STAR < MODULO).
    Conflict between rule 65 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 65 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 65 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 65 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 65 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 65 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 65 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 65 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 124

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   66          | expr SLASH expr .
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 66 (binary_op)

    Conflict between rule 66 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 66 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 66 and token STAR resolved as reduce (STAR < SLASH).
    Conflict between rule 66 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 66 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 66 and token PLUS resolved as reduce (PLUS < SLASH).
    Conflict between rule 66 and token MINUS resolved as reduce (MINUS < SLASH).
    Conflict between rule 66 and token LESS resolved as reduce (LESS < SLASH).
    Conflict between rule 66 and token LESSEQUALS resolved as reduce (LESSEQUALS < SLASH).
    Conflict between rule 66 and token GREATER resolved as reduce (GREATER < SLASH).
    Conflict between rule 66 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < SLASH).
    Conflict between rule 66 and token EQUALS resolved as reduce (EQUALS < SLASH).
    Conflict between rule 66 and token NOTEQUALS resolved as reduce (NOTEQUALS < SLASH).


State 125

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   67          | expr MODULO expr .
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    $default  reduce using rule 67 (binary_op)

    Conflict between rule 67 and token LOGOR resolved as reduce (%left LOGOR).
    Conflict between rule 67 and token LOGAND resolved as reduce (%left LOGAND).
    Conflict between rule 67 and token STAR resolved as reduce (STAR < MODULO).
    Conflict between rule 67 and token SLASH resolved as reduce (%left SLASH).
    Conflict between rule 67 and token MODULO resolved as reduce (%left MODULO).
    Conflict between rule 67 and token PLUS resolved as reduce (PLUS < MODULO).
    Conflict between rule 67 and token MINUS resolved as reduce (MINUS < MODULO).
    Conflict between rule 67 and token LESS resolved as reduce (LESS < MODULO).
    Conflict between rule 67 and token LESSEQUALS resolved as reduce (LESSEQUALS < MODULO).
    Conflict between rule 67 and token GREATER resolved as reduce (GREATER < MODULO).
    Conflict between rule 67 and token GREATEREQUALS resolved as reduce (GREATEREQUALS < MODULO).
    Conflict between rule 67 and token EQUALS resolved as reduce (EQUALS < MODULO).
    Conflict between rule 67 and token NOTEQUALS resolved as reduce (NOTEQUALS < MODULO).


State 126

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   68          | expr PLUS expr .
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 68 (binary_op)

    Conflict between rule 68 and token LOGOR resolved as shift (PLUS < LOGOR).
    Conflict between rule 68 and token LOGAND resolved as shift (PLUS < LOGAND).
    Conflict between rule 68 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 68 and token SLASH resolved as shift (PLUS < SLASH).
    Conflict between rule 68 and token MODULO resolved as shift (PLUS < MODULO).
    Conflict between rule 68 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 68 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 68 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 68 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 68 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 68 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 68 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 68 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 127

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   69          | expr MINUS expr .
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 69 (binary_op)

    Conflict between rule 69 and token LOGOR resolved as shift (MINUS < LOGOR).
    Conflict between rule 69 and token LOGAND resolved as shift (MINUS < LOGAND).
    Conflict between rule 69 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 69 and token SLASH resolved as shift (MINUS < SLASH).
    Conflict between rule 69 and token MODULO resolved as shift (MINUS < MODULO).
    Conflict between rule 69 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 69 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 69 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 69 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 69 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 69 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 69 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 69 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 128

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   72          | expr LESS expr .
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 72 (binary_op)

    Conflict between rule 72 and token LOGOR resolved as shift (LESS < LOGOR).
    Conflict between rule 72 and token LOGAND resolved as shift (LESS < LOGAND).
    Conflict between rule 72 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 72 and token SLASH resolved as shift (LESS < SLASH).
    Conflict between rule 72 and token MODULO resolved as shift (LESS < MODULO).
    Conflict between rule 72 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 72 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 72 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 72 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 72 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 72 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 72 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 72 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 129

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   73          | expr LESSEQUALS expr .
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 73 (binary_op)

    Conflict between rule 73 and token LOGOR resolved as shift (LESSEQUALS < LOGOR).
    Conflict between rule 73 and token LOGAND resolved as shift (LESSEQUALS < LOGAND).
    Conflict between rule 73 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 73 and token SLASH resolved as shift (LESSEQUALS < SLASH).
    Conflict between rule 73 and token MODULO resolved as shift (LESSEQUALS < MODULO).
    Conflict between rule 73 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 73 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 73 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 73 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 73 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 73 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 73 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 73 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 130

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   70          | expr GREATER expr .
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 70 (binary_op)

    Conflict between rule 70 and token LOGOR resolved as shift (GREATER < LOGOR).
    Conflict between rule 70 and token LOGAND resolved as shift (GREATER < LOGAND).
    Conflict between rule 70 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 70 and token SLASH resolved as shift (GREATER < SLASH).
    Conflict between rule 70 and token MODULO resolved as shift (GREATER < MODULO).
    Conflict between rule 70 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 70 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 70 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 70 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 70 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 70 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 70 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 70 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 131

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   71          | expr GREATEREQUALS expr .
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 71 (binary_op)

    Conflict between rule 71 and token LOGOR resolved as shift (GREATEREQUALS < LOGOR).
    Conflict between rule 71 and token LOGAND resolved as shift (GREATEREQUALS < LOGAND).
    Conflict between rule 71 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 71 and token SLASH resolved as shift (GREATEREQUALS < SLASH).
    Conflict between rule 71 and token MODULO resolved as shift (GREATEREQUALS < MODULO).
    Conflict between rule 71 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 71 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 71 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 71 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 71 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 71 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 71 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 71 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 132

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   74          | expr EQUALS expr .
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 74 (binary_op)

    Conflict between rule 74 and token LOGOR resolved as shift (EQUALS < LOGOR).
    Conflict between rule 74 and token LOGAND resolved as shift (EQUALS < LOGAND).
    Conflict between rule 74 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 74 and token SLASH resolved as shift (EQUALS < SLASH).
    Conflict between rule 74 and token MODULO resolved as shift (EQUALS < MODULO).
    Conflict between rule 74 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 74 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 74 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 74 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 74 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 74 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 74 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 74 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 133

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   75          | expr NOTEQUALS expr .
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR   shift, and go to state 84
    LOGAND  shift, and go to state 85
    SLASH   shift, and go to state 87
    MODULO  shift, and go to state 88

    $default  reduce using rule 75 (binary_op)

    Conflict between rule 75 and token LOGOR resolved as shift (NOTEQUALS < LOGOR).
    Conflict between rule 75 and token LOGAND resolved as shift (NOTEQUALS < LOGAND).
    Conflict between rule 75 and token STAR resolved as reduce (%left STAR).
    Conflict between rule 75 and token SLASH resolved as shift (NOTEQUALS < SLASH).
    Conflict between rule 75 and token MODULO resolved as shift (NOTEQUALS < MODULO).
    Conflict between rule 75 and token PLUS resolved as reduce (%left PLUS).
    Conflict between rule 75 and token MINUS resolved as reduce (%left MINUS).
    Conflict between rule 75 and token LESS resolved as reduce (%left LESS).
    Conflict between rule 75 and token LESSEQUALS resolved as reduce (%left LESSEQUALS).
    Conflict between rule 75 and token GREATER resolved as reduce (%left GREATER).
    Conflict between rule 75 and token GREATEREQUALS resolved as reduce (%left GREATEREQUALS).
    Conflict between rule 75 and token EQUALS resolved as reduce (%left EQUALS).
    Conflict between rule 75 and token NOTEQUALS resolved as reduce (%left NOTEQUALS).


State 134

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr
   79 array_elem_exp: ident LSQUARE expr . RSQUARE

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96
    RSQUARE        shift, and go to state 150


State 135

   10 statement_seq: statement_seq . SEMICOLON statement
   22 statement: WHILE expr DO statement_seq . DONE

    DONE       shift, and go to state 151
    SEMICOLON  shift, and go to state 70


State 136

   46 pair_type: PAIR LPAREN pair_elem_type COMMA . pair_elem_type RPAREN

    PAIR    shift, and go to state 100
    INT     shift, and go to state 13
    BOOL    shift, and go to state 14
    CHAR    shift, and go to state 15
    STRING  shift, and go to state 16

    type            go to state 101
    base_type       go to state 102
    array_type      go to state 103
    pair_type       go to state 31
    pair_elem_type  go to state 152


State 137

   30 assign_rhs: CALL ident . LPAREN RPAREN
   31           | CALL ident . LPAREN arg_list RPAREN

    LPAREN  shift, and go to state 153


State 138

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr
   90 expr_list: expr .

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 90 (expr_list)


State 139

   88 array_liter: LSQUARE expr_list . RSQUARE
   91 expr_list: expr_list . COMMA expr

    RSQUARE  shift, and go to state 154
    COMMA    shift, and go to state 155


State 140

   28 assign_rhs: NEWPAIR LPAREN . expr COMMA expr RPAREN

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 156
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 141

   34 pair_elem_rhs: FST expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 34 (pair_elem_rhs)


State 142

   35 pair_elem_rhs: SND expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 35 (pair_elem_rhs)


State 143

   13 statement: type ident ASSIGN assign_rhs .

    $default  reduce using rule 13 (statement)


State 144

    4 function_declaration: type ident LPAREN RPAREN . IS statement_seq END

    IS  shift, and go to state 157


State 145

    5 function_declaration: type ident LPAREN param_list . RPAREN IS statement_seq END
    7 param_list: param_list . COMMA param

    RPAREN  shift, and go to state 158
    COMMA   shift, and go to state 159


State 146

    6 param_list: param .

    $default  reduce using rule 6 (param_list)


State 147

    8 param: type . ident
   45 array_type: type . LSQUARE RSQUARE

    LSQUARE     shift, and go to state 72
    IDENTIFIER  shift, and go to state 22

    ident  go to state 160


State 148

   80 array_elem_lhs: ident LSQUARE expr RSQUARE .

    $default  reduce using rule 80 (array_elem_lhs)


State 149

   21 statement: IF expr THEN statement_seq ELSE . statement_seq FI

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 161
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 150

   79 array_elem_exp: ident LSQUARE expr RSQUARE .

    $default  reduce using rule 79 (array_elem_exp)


State 151

   22 statement: WHILE expr DO statement_seq DONE .

    $default  reduce using rule 22 (statement)


State 152

   46 pair_type: PAIR LPAREN pair_elem_type COMMA pair_elem_type . RPAREN

    RPAREN  shift, and go to state 162


State 153

   30 assign_rhs: CALL ident LPAREN . RPAREN
   31           | CALL ident LPAREN . arg_list RPAREN

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    RPAREN      shift, and go to state 163
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    arg_list        go to state 164
    expr            go to state 165
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 154

   88 array_liter: LSQUARE expr_list RSQUARE .

    $default  reduce using rule 88 (array_liter)


State 155

   91 expr_list: expr_list COMMA . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 166
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 156

   28 assign_rhs: NEWPAIR LPAREN expr . COMMA expr RPAREN
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96
    COMMA          shift, and go to state 167


State 157

    4 function_declaration: type ident LPAREN RPAREN IS . statement_seq END

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 168
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 158

    5 function_declaration: type ident LPAREN param_list RPAREN . IS statement_seq END

    IS  shift, and go to state 169


State 159

    7 param_list: param_list COMMA . param

    PAIR    shift, and go to state 12
    INT     shift, and go to state 13
    BOOL    shift, and go to state 14
    CHAR    shift, and go to state 15
    STRING  shift, and go to state 16

    param       go to state 170
    type        go to state 147
    base_type   go to state 29
    array_type  go to state 30
    pair_type   go to state 31


State 160

    8 param: type ident .

    $default  reduce using rule 8 (param)


State 161

   10 statement_seq: statement_seq . SEMICOLON statement
   21 statement: IF expr THEN statement_seq ELSE statement_seq . FI

    FI         shift, and go to state 171
    SEMICOLON  shift, and go to state 70


State 162

   46 pair_type: PAIR LPAREN pair_elem_type COMMA pair_elem_type RPAREN .

    $default  reduce using rule 46 (pair_type)


State 163

   30 assign_rhs: CALL ident LPAREN RPAREN .

    $default  reduce using rule 30 (assign_rhs)


State 164

   31 assign_rhs: CALL ident LPAREN arg_list . RPAREN
   33 arg_list: arg_list . COMMA expr

    RPAREN  shift, and go to state 172
    COMMA   shift, and go to state 173


State 165

   32 arg_list: expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 32 (arg_list)


State 166

   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr
   91 expr_list: expr_list COMMA expr .

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 91 (expr_list)


State 167

   28 assign_rhs: NEWPAIR LPAREN expr COMMA . expr RPAREN

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 174
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 168

    4 function_declaration: type ident LPAREN RPAREN IS statement_seq . END
   10 statement_seq: statement_seq . SEMICOLON statement

    END        shift, and go to state 175
    SEMICOLON  shift, and go to state 70


State 169

    5 function_declaration: type ident LPAREN param_list RPAREN IS . statement_seq END

    BEGIN       shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    SKIP        shift, and go to state 8
    FREE        shift, and go to state 9
    EXIT        shift, and go to state 10
    RETURN      shift, and go to state 11
    PAIR        shift, and go to state 12
    INT         shift, and go to state 13
    BOOL        shift, and go to state 14
    CHAR        shift, and go to state 15
    STRING      shift, and go to state 16
    PRINT       shift, and go to state 17
    PRINTLN     shift, and go to state 18
    READ        shift, and go to state 19
    FST         shift, and go to state 20
    SND         shift, and go to state 21
    IDENTIFIER  shift, and go to state 22

    statement_seq   go to state 176
    statement       go to state 25
    assign_lhs      go to state 26
    pair_elem_lhs   go to state 27
    type            go to state 35
    base_type       go to state 29
    array_type      go to state 30
    pair_type       go to state 31
    ident           go to state 32
    array_elem_lhs  go to state 33


State 170

    7 param_list: param_list COMMA param .

    $default  reduce using rule 7 (param_list)


State 171

   21 statement: IF expr THEN statement_seq ELSE statement_seq FI .

    $default  reduce using rule 21 (statement)


State 172

   31 assign_rhs: CALL ident LPAREN arg_list RPAREN .

    $default  reduce using rule 31 (assign_rhs)


State 173

   33 arg_list: arg_list COMMA . expr

    TRUE        shift, and go to state 36
    FALSE       shift, and go to state 37
    NULLTOKEN   shift, and go to state 38
    PLUS        shift, and go to state 39
    MINUS       shift, and go to state 40
    BANG        shift, and go to state 41
    LEN         shift, and go to state 42
    ORD         shift, and go to state 43
    CHR         shift, and go to state 44
    LPAREN      shift, and go to state 45
    IDENTIFIER  shift, and go to state 22
    STRINGLIT   shift, and go to state 46
    CHARLIT     shift, and go to state 47

    $default  reduce using rule 82 (int_sign)

    expr            go to state 177
    unary_op        go to state 49
    binary_op       go to state 50
    ident           go to state 51
    array_elem_exp  go to state 52
    int_liter       go to state 53
    int_sign        go to state 54
    bool_liter      go to state 55
    char_liter      go to state 56
    str_liter       go to state 57
    pair_liter      go to state 58


State 174

   28 assign_rhs: NEWPAIR LPAREN expr COMMA expr . RPAREN
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96
    RPAREN         shift, and go to state 178


State 175

    4 function_declaration: type ident LPAREN RPAREN IS statement_seq END .

    $default  reduce using rule 4 (function_declaration)


State 176

    5 function_declaration: type ident LPAREN param_list RPAREN IS statement_seq . END
   10 statement_seq: statement_seq . SEMICOLON statement

    END        shift, and go to state 179
    SEMICOLON  shift, and go to state 70


State 177

   33 arg_list: arg_list COMMA expr .
   65 binary_op: expr . STAR expr
   66          | expr . SLASH expr
   67          | expr . MODULO expr
   68          | expr . PLUS expr
   69          | expr . MINUS expr
   70          | expr . GREATER expr
   71          | expr . GREATEREQUALS expr
   72          | expr . LESS expr
   73          | expr . LESSEQUALS expr
   74          | expr . EQUALS expr
   75          | expr . NOTEQUALS expr
   76          | expr . LOGAND expr
   77          | expr . LOGOR expr

    LOGOR          shift, and go to state 84
    LOGAND         shift, and go to state 85
    STAR           shift, and go to state 86
    SLASH          shift, and go to state 87
    MODULO         shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    LESS           shift, and go to state 91
    LESSEQUALS     shift, and go to state 92
    GREATER        shift, and go to state 93
    GREATEREQUALS  shift, and go to state 94
    EQUALS         shift, and go to state 95
    NOTEQUALS      shift, and go to state 96

    $default  reduce using rule 33 (arg_list)


State 178

   28 assign_rhs: NEWPAIR LPAREN expr COMMA expr RPAREN .

    $default  reduce using rule 28 (assign_rhs)


State 179

    5 function_declaration: type ident LPAREN param_list RPAREN IS statement_seq END .

    $default  reduce using rule 5 (function_declaration)
