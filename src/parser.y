%{

#include "astnode.h"
#include <cstdio>
#include <cstdlib>

extern int yylex();  /* Lexical analyser generated by flex */

void yyerror(const char *message) {  /* action on encountering an error */
  std::printf("Error: %s\n", message);
  std::exit(1); 
}
	
statementSeq *ast;     /* Pointer to root of Abstract Syntax Tree */

%}

/* BISON DECLARATIONS  ---------------------------------------------------- */

/* Define all possible syntactic values */
/* %define api.value.type variant - need if  proper C++ typing is used */

%union {
  int           token;
  std::string   *string;

  Identifier 		*id;
  statementSeq 		*statementseq;
  statement 		*statement;
  Expression 		*expression;
  ExpressionList 	*exprlist;
  VariableList   	*varlist;
  VariableDeclaration 	*vardec;
  FunctionDeclaration 	*fundec;
}

%token <token>  BEGIN END IF THEN ELSE FI WHILE DO DONE SKIP FREE EXIT

%token <token>  IS RETURN CALL

%token <token> PAIR INT BOOL CHAR STRING NULL

%token <token>  ASSIGN LESSEQUALS LESS GREATEREQUALS GREATER EQUALS BANG  
%token <token>  NOTEQUALS PLUS MINUS STAR SLASH MODULO LOGAND LOGOR

%token <token>  LPAREN RPAREN LSQUARE RSQUARE SEMICOLON COMMA ERROR

%token <token> PRINT PRINTLN READ NEWPAIR FST SND LEN ORD CHR

%token <string> INTEGER IDENTIFIER STRINGLIT CHARLIT TRUE FALSE


/*%type <id>	       identifier
%type <statementseq>    statement_sequence  
%type <statement>  statement begin_statement assign_statement  
%type <statement>  if_statement while_statement 
%type <statement>  repeat_statement read_statement write_statement
%type <expression> expression  number
%type <exprlist>   actual_parameters
%type <varlist>    formal_parameters
%type <token>	     comparator
%type <vardec>	   variable_declaration
%type <fundec>     function_declaration
*/

/* Precedence of operators */
%left PLUS MINUS STAR SLASH MODULO 

/* Start symbol. If omitted will default to first non-terminal symbol */
%start program 

%%
program: 
    BEGIN func_list statement END

func_list:
/* empty */
| function_declaration
| func_list function_declaration

function_declaration:
  type ident LPAREN param_list RPAREN IS statement END

param_list:
    param
  | param COMMA param_list

param:
    type ident

statement:
    SKIP
  | type ident ASSIGN assign-rhs
  | assign-lhs ASSIGN assign-rhs
  | READ assign-lhs
  | FREE expr
  | EXIT INTEGER
  | PRINT expr
  | PRINTLN expr
  | IF expr THEN statement ELSE statement FI
  | WHILE expr DO statement DONE
  | statement SEMICOLON statement

assign-lhs:
		ident
  | array-elem
	| pair-elem

assign-rhs:
    expr
  | array-liter
  | NEWPAIR LPAREN expr COMMA expr RPAREN
  | pair-elem
  | CALL ident LPAREN opt-arg-list RPAREN

opt-arg-list:
/* empty */
  | arg-list

arg-list:
    expr
  | expr COMMA arg-list

pair-elem:
    FST expr
  | SND expr

type:
    base-type
  | array-type
  | pair-type

base-type:
    INT
  | BOOL
  | CHAR
  | STRING

array-type:
  type LSQUARE RSQUARE

pair-type:
  PAIR LPAREN pair-elem-type COMMA pair-elem-type RPAREN

pair-elem-type:
    base-type
  | array-type
  | PAIR

expr:
    int-liter
  | bool-liter
  | char-liter 
  | str-liter
  | pair-liter
  | ident
  | array-elem
  | unary-oper expr
  | expr binary-oper expr
  | LPAREN expr RPAREN

unary-oper:
    BANG
  | MINUS
  | LEN
  | ORD
  | CHR

binary-oper:
    STAR
  | SLASH
  | MODULO
  | PLUS 
  | MINUS
  | GREATER
  | GREATEREQUALS
  | LESS
  | LESSEQUALS
  | EQUALS
  | NOTEQUALS
  | LOGAND
  | LOGOR

ident:
    IDENTIFIER 

array-elem:
    ident array-index

array-index:
		LSQUARE expr RSQUARE
	| LSQUARE expr RSQUARE array-index

int-liter:
		int-sign INTEGER

int-sign:
/* empty */
	|	PLUS
	| MINUS

bool-liter:
		TRUE		
	| FALSE

char-liter:
		CHARLIT

str-liter:
		STRINGLIT

array-liter:
	RSQUARE expr-list LSQUARE

expr-list:
		expr
	| expr COMMA expr-list

pair-liter:
		NULL 

%%
