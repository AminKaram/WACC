%{

#include "astnode.h"
#include <cstdio>
#include <cstdlib>

extern int yylex();  /* Lexical analyser generated by flex */

void yyerror(const char *message) {  /* action on encountering an error */
  std::printf("Error: %s\n", message);
  std::exit(1); 
}
	
StatSeq *ast;     /* Pointer to root of Abstract Syntax Tree */

%}

/* BISON DECLARATIONS  ---------------------------------------------------- */

/* Define all possible syntactic values */
/* %define api.value.type variant - need if  proper C++ typing is used */

%union {
  int           token;
  std::string   *string;

  Identifier 		*id;
  StatSeq 		*statseq;
  Statement 		*statement;
  Expression 		*expression;
  ExpressionList 	*exprlist;
  VariableList   	*varlist;
  VariableDeclaration 	*vardec;
  FunctionDeclaration 	*fundec;
}

%token <token>  BEGIN END IF THEN ELSE FI WHILE DO DONE SKIP FREE EXIT

%token <token>  IS RETURN CALL

%token <token> PAIR INT BOOL CHAR STRING NULL

%token <token>  ASSIGN EQUALS LESSEQUALS LESS GREATEREQUALS GREATER EQUALS  
%token <token>  NOTEQUALS ASSIGN PLUS MINUS STAR SLASH MODULO LOGAND LOGOR

%token <token>  LPAREN RPAREN LSQUARE RSQUARE SEMICOLON COMMA ERROR

%token <token> PRINT PRINTLN READ NEWPAIR FSTSND LEN ORD CHR

%token <string> INTEGER IDENTIFIER STRINGLIT CHARLIT


%type <id>	       identifier
%type <statseq>    statement_sequence  
%type <statement>  statement begin_statement assign_statement  
%type <statement>  if_statement while_statement 
%type <statement>  repeat_statement read_statement write_statement
%type <expression> expression  number
%type <exprlist>   actual_parameters
%type <varlist>    formal_parameters
%type <token>	     comparator
%type <vardec>	   variable_declaration
%type <fundec>     function_declaration

/* Precedence of operators */
%left PLUS MINUS STAR SLASH MODULO 

/* Start symbol. If omitted will default to first non-terminal symbol */
%start program 

%%
program: 
    BEGIN func_list stat END

func_list:
/* empty */
| fundec
| funclist fundec

function_declaration:
  type id LPAREN param_list RPAREN IS stat END

param_list:
    param
  | param , param_list

param:
    type id

statement:
    SKIP
  | type id ASSIGN ass_rhs
  | ass_lhs ASSIGN ass_rhs
  | READ ass_lhs
  | free expr
  | exit INTEGER
  | print expr
  | println expr
  | IF expr THEN stat ELSE stat FI
  | WHILE expr DO stat DONE
  | stat SEMICOLON stat
  
assign-lhs:
    ident
  | array_liter
  | newpair LPAREN expr COMMA expr RPAREN
  | pair-elem
  | call ident LPAREN opt-arg-list RPAREN

opt-arg-list:
/* empty */
  | arg-list

arg-list:
  expr
  |expr, arg-list

pair-elem:
    fst expr
  | snd expr

type:
    base-type
  | array-type
  | pair-type

base-type:
    INT
  | BOOL
  | CHAR
  | STRING

array-type:
  type LSQUARE RSQUARE

pair-type:
  PAIR LPAREN pair-elem_type COMMA pair-elem-type RPAREN

pair-elem-type:
    base-type
  | array-type
  | PAIR

expr:
    int-liter
  | bool-liter
  | char-liter
  | str-liter
  | pair-liter
  | ident
  | array-elem
  | unary-oper expr
  | expr binary-oper expr
  | LPAREN expr RPAREN

unary-oper:
    BANG
  | MINUS
  | LEN
  | ORD
  | CHR

binary-oper:
    STAR
  | SLASH
  | MODULO
  | PLUS 
  | MINUS
  | GREATER
  | GREATEREQUALS
  | LESS
  | LESSEQUALS
  | EQUALS
  | NOTEQUALS
  | LOGAND
  | LOGOR

ident:
    IDENTIFIER 

array-elem
    ident 

%%
